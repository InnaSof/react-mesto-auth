{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\nexport const register = _ref => {\n  let {\n    password,\n    email\n  } = _ref;\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => {\n    if (res.status === 400) {\n      return Promise.reject(\"Некорректно заполнено одно из полей \");\n    }\n\n    return res.json();\n  });\n};\nexport const authorize = _ref2 => {\n  let {\n    password,\n    email\n  } = _ref2;\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => {\n    if (res.status === 400) {\n      return Promise.reject(\"Не передано одно из полей\");\n    }\n\n    if (res.status === 401) {\n      return Promise.reject(\"Пользователь с email не найден\");\n    }\n\n    return res.json();\n  });\n};\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(res => {\n    if (res.status === 400) {\n      return Promise.reject(\"Токен не передан или передан не в том формате\");\n    }\n\n    if (res.status === 401) {\n      return Promise.reject(\"Переданный токен некорректен\");\n    }\n\n    return res.json();\n  });\n};","map":{"version":3,"sources":["/Users/vitalijsofronuk/dev/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","register","password","email","fetch","method","headers","body","JSON","stringify","then","res","status","Promise","reject","json","authorize","checkToken","token"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAAjB;AAEP,OAAO,MAAMC,QAAQ,GAAG,QAAyB;AAAA,MAAxB;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAwB;AAC/C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBP,MAAAA,QADmB;AAEnBC,MAAAA;AAFmB,KAAf;AAN2B,GAAvB,CAAL,CAWNO,IAXM,CAWAC,GAAD,IAAS;AACb,QAAGA,GAAG,CAACC,MAAJ,KAAe,GAAlB,EAAuB;AACrB,aAAOC,OAAO,CAACC,MAAR,CAAe,sCAAf,CAAP;AACD;;AACD,WAAOH,GAAG,CAACI,IAAJ,EAAP;AACD,GAhBM,CAAP;AAiBD,CAlBM;AAoBP,OAAO,MAAMC,SAAS,GAAG,SAAyB;AAAA,MAAxB;AAAEd,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAwB;AAChD,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBP,MAAAA,QADmB;AAEnBC,MAAAA;AAFmB,KAAf;AAN2B,GAAvB,CAAL,CAWNO,IAXM,CAWAC,GAAD,IAAS;AACb,QAAGA,GAAG,CAACC,MAAJ,KAAe,GAAlB,EAAuB;AACrB,aAAOC,OAAO,CAACC,MAAR,CAAe,2BAAf,CAAP;AACD;;AACD,QAAGH,GAAG,CAACC,MAAJ,KAAe,GAAlB,EAAuB;AACrB,aAAOC,OAAO,CAACC,MAAR,CAAe,gCAAf,CAAP;AACD;;AACD,WAAOH,GAAG,CAACI,IAAJ,EAAP;AACD,GAnBM,CAAP;AAoBD,CArBM;AAuBP,OAAO,MAAME,UAAU,GAAIC,KAAD,IAAW;AACnC,SAAOd,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACnCK,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAkB,UAASY,KAAM;AAF1B;AAF0B,GAAzB,CAAL,CAONR,IAPM,CAOAC,GAAD,IAAS;AACb,QAAGA,GAAG,CAACC,MAAJ,KAAe,GAAlB,EAAuB;AACrB,aAAOC,OAAO,CAACC,MAAR,CAAe,+CAAf,CAAP;AACD;;AACD,QAAGH,GAAG,CAACC,MAAJ,KAAe,GAAlB,EAAuB;AACrB,aAAOC,OAAO,CAACC,MAAR,CAAe,8BAAf,CAAP;AACD;;AACD,WAAOH,GAAG,CAACI,IAAJ,EAAP;AACD,GAfM,CAAP;AAgBD,CAjBM","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\nexport const register = ({ password, email }) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email,\n      })\n  })\n  .then((res) => {\n    if(res.status === 400) {\n      return Promise.reject(\"Некорректно заполнено одно из полей \"); \n    }\n    return res.json();\n  })\n};\n\nexport const authorize = ({ password, email }) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email,\n      })\n  })\n  .then((res) => {\n    if(res.status === 400) {\n      return Promise.reject(\"Не передано одно из полей\");\n    }\n    if(res.status === 401) {\n      return Promise.reject(\"Пользователь с email не найден\");\n    }\n    return res.json();\n  })\n};\n\nexport const checkToken = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    }\n  })\n  .then((res) => {\n    if(res.status === 400) {\n      return Promise.reject(\"Токен не передан или передан не в том формате\");\n    }\n    if(res.status === 401) {\n      return Promise.reject(\"Переданный токен некорректен\");\n    }\n    return res.json();\n  })\n};\n"]},"metadata":{},"sourceType":"module"}